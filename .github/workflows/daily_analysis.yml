name: Daily Vehicle Location Analysis

on:
  schedule:
    # Run every day at 6:00 AM UTC (11:30 AM IST)
    - cron: '0 6 * * *'
  workflow_dispatch: # Allows manual trigger from GitHub UI

jobs:
  run-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 60 # Set timeout to prevent infinite runs

    # Define environment variables once for the entire job
    env:
      PROD_DATABASE_URI: ${{ secrets.PROD_DATABASE_URI }}
      GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
      AWS_ACCESS_KEY_READ: ${{ secrets.AWS_ACCESS_KEY_READ }}
      AWS_SECRET_KEY_READ: ${{ secrets.AWS_SECRET_KEY_READ }}
      AWS_ACCESS_KEY_WRITE: ${{ secrets.AWS_ACCESS_KEY_WRITE }}
      AWS_SECRET_KEY_WRITE: ${{ secrets.AWS_SECRET_KEY_WRITE }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11' # Using a more flexible version

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        # This is the standard path for pip's cache
        path: ~/.cache/pip
        # Create a unique key for the cache based on the requirements file
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev openvpn

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create OVPN config
      run: echo "${{ secrets.OVPN_CONFIG }}" > config.ovpn

    - name: Connect to OpenVPN
      run: sudo openvpn --config config.ovpn --daemon

    - name: Wait for connection
      run: sleep 15

    - name: Verify environment variables
      run: |
        echo "Checking environment variables..."
        if [ -z "$PROD_DATABASE_URI" ]; then echo "‚ùå PROD_DATABASE_URI not set"; exit 1; fi
        if [ -z "$GOOGLE_MAPS_API_KEY" ]; then echo "‚ùå GOOGLE_MAPS_API_KEY not set"; exit 1; fi
        if [ -z "$AWS_ACCESS_KEY_READ" ]; then echo "‚ùå AWS_ACCESS_KEY_READ not set"; exit 1; fi
        if [ -z "$AWS_SECRET_KEY_READ" ]; then echo "‚ùå AWS_SECRET_KEY_READ not set"; exit 1; fi
        if [ -z "$AWS_ACCESS_KEY_WRITE" ]; then echo "‚ùå AWS_ACCESS_KEY_WRITE not set"; exit 1; fi
        if [ -z "$AWS_SECRET_KEY_WRITE" ]; then echo "‚ùå AWS_SECRET_KEY_WRITE not set"; exit 1; fi
        echo "‚úÖ All required secrets are set"

    - name: Run daily vehicle analysis
      run: |
        echo "üöÄ Starting daily analysis at $(date)"
        python main.py
        echo "‚úÖ Analysis completed at $(date)"

    - name: Upload analysis results
      if: always() # Run even if the analysis fails
      uses: actions/upload-artifact@v4
      with:
        name: analysis-results-${{ github.run_number }}
        path: |
          night_locations.json
          *.log
        retention-days: 30

    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå Daily analysis failed!"
        echo "Check the logs and artifacts in the GitHub Actions tab"
